#!/usr/bin/env bats

{{- define "template" -}}
#!/usr/bin/env bats

# Generated from {{ tmpl.Path }}

# bats file_tags=static,bin:init,{{ .provider }}

setup_file() {
  load "../../../common/lib"
  load "../../../common/lib/env"
  load "../../../common/lib/gpg"

  gpg.setup
  env.setup

  env.init {{ .flavor }} {{ .provider }}
}

setup() {
  load "../../../common/lib"
  load "../../../common/lib/env"
  load "script"

  common_setup
  env.private
}

teardown() {
  env.teardown
}

teardown_file() {
  env.teardown
  gpg.teardown
}

@test "init is successful - {{ .provider }}:{{ .flavor }}" {
  test_init_successful
}

@test "init is idempotent - {{ .provider }}:{{ .flavor }}" {
  test_init_idempotent
}
{{ end }}

# These tests are generated into these files:
{{- range $provider := coll.Slice "aws" "baremetal" "citycloud" "elastx" "exoscale" "safespring" "upcloud" }}
{{- range $flavor := coll.Slice "air-gapped" "dev" "prod" }}
{{- $file := tmpl.Path | path.Dir }}
{{- $file = printf "test-%s-%s.gen.bats" $provider $flavor | path.Join $file }}
# - {{ $file }}
{{- coll.Dict "flavor" $flavor "provider" $provider | tmpl.Exec "template" | file.Write $file }}
{{- end }}
{{- end }}
