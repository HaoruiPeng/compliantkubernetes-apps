{{- $namespaces := keys .Values.constraints | sortAlpha }}
{{- $exceptions := .Values.mutationExceptions }}
---
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privileged-restricted-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    {{- dict "namespaces" $namespaces "exceptions" $exceptions | include "podsecuritypolicies.renderMatchExceptions" | nindent 4 }}
  location: "spec.containers[name: *].securityContext.privileged"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.privileged"
        condition: MustNotExist
---
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privileged-restricted-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    {{- dict "namespaces" $namespaces "exceptions" $exceptions | include "podsecuritypolicies.renderMatchExceptions" | nindent 4 }}
  location: "spec.ephemeralContainers[name: *].securityContext.privileged"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.privileged"
        condition: MustNotExist
---
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privileged-restricted-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    {{- dict "namespaces" $namespaces "exceptions" $exceptions | include "podsecuritypolicies.renderMatchExceptions" | nindent 4 }}
  location: "spec.initContainers[name: *].securityContext.privileged"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.privileged"
        condition: MustNotExist
